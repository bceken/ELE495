#include <FastLED.h>
int stripstart[] = {0, 20, 41, 62, 82};
int numValues = sizeof(stripstart) / sizeof(int);
uint8_t strip_end[5] = {9, 29, 50, 71, 91};  

#define LED_PIN 6  
#define NUM_LEDS 100  
#define BRIGHTNESS 100  
#define SHIFT_TIME 1000  
#define NEW_STRIP_DELAY 3000  
#define LED_STRIP_LENGTH 10
CRGB leds[NUM_LEDS];

void setup() {
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);  
  FastLED.setBrightness(BRIGHTNESS);  
  randomSeed(analogRead(0));
}

void loop() {
  static uint32_t last_shift_time = 0;  
  static uint32_t last_strip_time = 0;  
  static uint8_t strip_length = 0;  
  static bool strip_color = false; 
  static uint8_t current_led = 0;  

  static uint8_t strip_start = 0;
  static uint8_t current_strip = 0;
  
  // Shifting 1000ms
  if (millis() - last_shift_time >= SHIFT_TIME) {
    
    for (int i = NUM_LEDS - 1; i > 0; i--) {
      leds[i] = leds[i - 1];
    }
    leds[0] = CRGB::Black;
    FastLED.show();
    
    last_shift_time = millis();  
  }
  
  
  if (millis() - last_strip_time >= NEW_STRIP_DELAY) {
    // choose color and length
    strip_color = random(2);
    strip_length = random(1, 5);
    int randIndex = random(numValues);
    int randValue = stripstart[randIndex];
    strip_start = randValue;
    current_led = 0;  
    
    last_strip_time = millis();  
  }
  
 /
  if (current_led < strip_length) {
    
    if (strip_color) {
      leds[current_strip * LED_STRIP_LENGTH + strip_start + current_led] = CRGB::Green;
    } else {
      leds[current_strip * LED_STRIP_LENGTH + strip_start + current_led] = CRGB::Red;
    }
    FastLED.show();
    current_led++;  
    delay(400);  // led enter one by one
  }
  
  FastLED.delay(1000 / 60); 
}
